{"version":3,"sources":["app.js"],"names":["process","env","NODE_ENV","express","require","fs","Q","path","pad","module","exports","app","manager","epmManager","empRest","config","version","kernel","j","join","__dirname","existsSync","info","JSON","parse","readFileSync","e","startServer","ops","undefined","NW_GUI","gui","defer","server","createServer","get","progress","notify","msg","fail","err","done","use","listen","port","ip","console","log","setTimeout","resolve","promise"],"mappings":"AAAA;;;;AAIA;;AAEA;;AACAA,QAAQC,GAAR,CAAYC,QAAZ,GAAuBF,QAAQC,GAAR,CAAYC,QAAZ,IAAwB,aAA/C;;AAEA,IAAIC,UAAUC,QAAQ,SAAR,CAAd;AACA,IAAIC,KAAKD,QAAQ,IAAR,CAAT;AACA,IAAIE,IAAIF,QAAQ,GAAR,CAAR;AACA,IAAIG,OAAOH,QAAQ,MAAR,CAAX;;AAEA,IAAII,MAAMC,OAAOC,OAAP,GAAiB,EAA3B;;AAEA;AACA,IAAIC,MAAMH,IAAIG,GAAJ,GAAUR,SAApB;;AAEA;AACA,IAAIS,UAAUJ,IAAIK,UAAJ,GAAiBT,QAAQ,0BAAR,CAA/B;AACA,IAAIU,UAAUV,QAAQ,uBAAR,CAAd;;AAEA;AACA,IAAIW,SAASP,IAAIO,MAAJ,GAAaX,QAAQ,sBAAR,CAA1B;;AAEAO,IAAIK,OAAJ,GAAc,IAAd;AACAL,IAAIM,MAAJ,GAAa,KAAb;;AAEA,IAAIC,IAAIX,KAAKY,IAAL,CAAUC,SAAV,EAAqB,kBAArB,CAAR;AACA,IAAIf,GAAGgB,UAAH,CAAcH,CAAd,CAAJ,EAAqB;AACnB,MAAI;AACF,QAAII,OAAOC,KAAKC,KAAL,CAAWnB,GAAGoB,YAAH,CAAgBP,CAAhB,EAAmB,OAAnB,CAAX,CAAX;AACAP,QAAIK,OAAJ,GAAc,MAAMM,KAAKN,OAAzB;AACD,GAHD,CAGE,OAAMU,CAAN,EAAQ,CACT;AACF;;AAEDlB,IAAImB,WAAJ,GAAkB,UAASC,GAAT,EAAa;;AAE7BA,QAAMA,OAAO,EAAb;AACA,MAAIA,IAAI3B,GAAJ,KAAY4B,SAAhB,EAA0B;AACxB7B,YAAQC,GAAR,CAAYC,QAAZ,GAAuB0B,IAAI3B,GAA3B;AACD;;AAEDD,UAAQC,GAAR,CAAY6B,MAAZ,GAAqBF,IAAIG,GAAzB;;AAEA;AACA,MAAIC,QAAQ1B,EAAE0B,KAAF,EAAZ;;AAEA,MAAIC,SAASzB,IAAIyB,MAAJ,GAAa7B,QAAQ,MAAR,EAAgB8B,YAAhB,CAA6BvB,GAA7B,CAA1B;;AAEAC,UACKuB,GADL,CACS,OADT,EAEKC,QAFL,CAEc,UAASd,IAAT,EAAc;;AAEtBU,UAAMK,MAAN,CAAa;AACXC,WAAK,6CADM;AAEXF,gBAAUd,KAAKc;AAFJ,KAAb;AAKD,GATL,EAUKG,IAVL,CAUU,UAASC,GAAT,EAAa;AACjB,UAAMA,GAAN;AACD,GAZL,EAaKC,IAbL,CAaU,YAAU;;AAEd;AACA;AACA;AACArC,YAAQ,kBAAR,EAA4BO,GAA5B;AACAA,QAAI+B,GAAJ,CAAQ,MAAR,EAAgB5B,SAAhB;AACAV,YAAQ,UAAR,EAAoBO,GAApB;;AAEA;AACAsB,WAAOU,MAAP,CAAc5B,OAAO6B,IAArB,EAA2B7B,OAAO8B,EAAlC,EAAsC,YAAY;AAChDC,cAAQC,GAAR,CAAYhC,OAAO6B,IAAnB,EAAyB7B,OAAO8B,EAAhC;AACAG,iBAAW,YAAU;AACnBhB,cAAMiB,OAAN;AACD,OAFD,EAEG,GAFH;AAGD,KALD;AAOD,GA9BL;;AAgCA,SAAOjB,MAAMkB,OAAb;AACD,CA/CD","file":"app.js","sourcesContent":["/**\n * Main application file\n */\n\n'use strict';\n\n// Set default node environment to development\nprocess.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nvar express = require('express');\nvar fs = require('fs');\nvar Q = require('q');\nvar path = require('path');\n\nvar pad = module.exports = {};\n\n// the expressjs app\nvar app = pad.app = express(); \n\n// the repository manager\nvar manager = pad.epmManager = require('./components/epm-manager');\nvar empRest = require('./components/epm-rest');\n\n// the config\nvar config = pad.config = require('./config/environment');\n\napp.version = 'v6';\napp.kernel = 'EPM';\n\nvar j = path.join(__dirname, '/../package.json');\nif (fs.existsSync(j)){\n  try {\n    var info = JSON.parse(fs.readFileSync(j, 'utf-8'));\n    app.version = 'v' + info.version; \n  } catch(e){\n  }\n}\n\npad.startServer = function(ops){\n\n  ops = ops || {};\n  if (ops.env !== undefined){\n    process.env.NODE_ENV = ops.env;\n  }\n\n  process.env.NW_GUI = ops.gui;\n  \n  // the promise for web and repository\n  var defer = Q.defer();\n  \n  var server = pad.server = require('http').createServer(app);\n\n  manager\n      .get('local')\n      .progress(function(info){\n\n        defer.notify({\n          msg: \"Cargando los paquetes de contenido digital.\",\n          progress: info.progress\n        });\n\n      })\n      .fail(function(err){\n        throw err;\n      })\n      .done(function(){\n\n        // then configure the express\n        // define the EPM routes\n        // define the routes for the app\n        require('./config/express')(app);\n        app.use('/epm', empRest());\n        require('./routes')(app);\n\n        // Start server\n        server.listen(config.port, config.ip, function () {\n          console.log(config.port, config.ip);\n          setTimeout(function(){\n            defer.resolve();\n          }, 500);\n        });\n\n      });\n\n  return defer.promise;\n};"]}