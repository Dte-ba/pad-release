{"version":3,"sources":["app.js"],"names":["pad","module","exports","app","manager","epmManager","require","empRest","config","version","kernel","j","join","__dirname","existsSync","info","JSON","parse","readFileSync","e","startServer","ops","env","undefined","process","NODE_ENV","NW_GUI","gui","defer","server","createServer","default","use","get","progress","notify","msg","fail","err","done","listen","port","ip","setTimeout","resolve","promise"],"mappings":"AAAA;;;;AAIA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,MAAMC,OAAOC,OAAP,GAAiB,EAA3B;AACA;AACA,IAAIC,MAAMH,IAAIG,GAAJ,GAAU,wBAApB;;AAEA;AACA,IAAIC,UAAUJ,IAAIK,UAAJ,GAAiBC,QAAQ,0BAAR,CAA/B;AACA,IAAIC,UAAUD,QAAQ,uBAAR,CAAd;;AAEA;AACA,IAAIE,SAASR,IAAIQ,MAAJ,GAAaF,QAAQ,sBAAR,CAA1B;;AAEAH,IAAIM,OAAJ,GAAc,MAAd;AACAN,IAAIO,MAAJ,GAAa,KAAb;;AAEA,IAAIC,IAAI,eAAKC,IAAL,CAAUC,SAAV,EAAqB,kBAArB,CAAR;AACA,IAAI,aAAGC,UAAH,CAAcH,CAAd,CAAJ,EAAqB;AACnB,MAAI;AACF,QAAII,OAAOC,KAAKC,KAAL,CAAW,aAAGC,YAAH,CAAgBP,CAAhB,EAAmB,OAAnB,CAAX,CAAX;AACAR,QAAIM,OAAJ,GAAc,MAAMM,KAAKN,OAAzB;AACD,GAHD,CAGE,OAAMU,CAAN,EAAQ,CACT;AACF;;AAEDnB,IAAIoB,WAAJ,GAAkB,UAASC,GAAT,EAAa;;AAE7BA,QAAMA,OAAO,EAAb;AACA,MAAIA,IAAIC,GAAJ,KAAYC,SAAhB,EAA0B;AACxBC,YAAQF,GAAR,CAAYG,QAAZ,GAAuBJ,IAAIC,GAA3B;AACD;;AAEDE,UAAQF,GAAR,CAAYI,MAAZ,GAAqBL,IAAIM,GAAzB;;AAEA;AACA,MAAIC,QAAQ,YAAEA,KAAF,EAAZ;;AAEA,MAAIC,SAAS7B,IAAI6B,MAAJ,GAAavB,QAAQ,MAAR,EAAgBwB,YAAhB,CAA6B3B,GAA7B,CAA1B;;AAEA;AACA;AACA;AACAG,UAAQ,kBAAR,EAA4ByB,OAA5B,CAAoC5B,GAApC;AACAA,MAAI6B,GAAJ,CAAQ,MAAR,EAAgBzB,SAAhB;AACAD,UAAQ,UAAR,EAAoByB,OAApB,CAA4B5B,GAA5B;;AAEAC,UACK6B,GADL,CACS,OADT,EAEKC,QAFL,CAEc,UAACnB,IAAD,EAAU;;AAElBa,UAAMO,MAAN,CAAa;AACXC,WAAK,6CADM;AAEXF,gBAAUnB,KAAKmB;AAFJ,KAAb;AAKD,GATL,EAUKG,IAVL,CAUU,UAACC,GAAD,EAAS;AACb,UAAMA,GAAN;AACD,GAZL,EAaKC,IAbL,CAaU,YAAM;AACV;AACAV,WAAOW,MAAP,CAAchC,OAAOiC,IAArB,EAA2BjC,OAAOkC,EAAlC,EAAsC,YAAY;AAChDC,iBAAW,YAAU;AACnBf,cAAMgB,OAAN;AACD,OAFD,EAEG,GAFH;AAGD,KAJD;AAMD,GArBL;;AAuBA,SAAOhB,MAAMiB,OAAb;AACD,CA7CD","file":"app.js","sourcesContent":["/**\n * Main application file\n */\n\n'use strict';\n\nimport express from 'express';\nimport http from 'http';\nimport path from 'path';\nimport fs from 'fs';\nimport Q from 'q';\n\nvar pad = module.exports = {};\n// the expressjs app\nvar app = pad.app = express(); \n\n// the repository manager\nvar manager = pad.epmManager = require('./components/epm-manager');\nvar empRest = require('./components/epm-rest');\n\n// the config\nvar config = pad.config = require('./config/environment');\n\napp.version = 'v6.5';\napp.kernel = 'EPM';\n\nvar j = path.join(__dirname, '/../package.json');\nif (fs.existsSync(j)){\n  try {\n    var info = JSON.parse(fs.readFileSync(j, 'utf-8'));\n    app.version = 'v' + info.version; \n  } catch(e){\n  }\n}\n\npad.startServer = function(ops){\n\n  ops = ops || {};\n  if (ops.env !== undefined){\n    process.env.NODE_ENV = ops.env;\n  }\n\n  process.env.NW_GUI = ops.gui;\n  \n  // the promise for web and repository\n  var defer = Q.defer();\n  \n  var server = pad.server = require('http').createServer(app);\n\n  // then configure the express\n  // define the EPM routes\n  // define the routes for the app\n  require('./config/express').default(app);\n  app.use('/epm', empRest());\n  require('./routes').default(app);\n\n  manager\n      .get('local')\n      .progress((info) => {\n\n        defer.notify({\n          msg: \"Cargando los paquetes de contenido digital.\",\n          progress: info.progress\n        });\n\n      })\n      .fail((err) => {\n        throw err;\n      })\n      .done(() => {\n        // Start server\n        server.listen(config.port, config.ip, function () {\n          setTimeout(function(){\n            defer.resolve();\n          }, 500);\n        });\n\n      });\n\n  return defer.promise;\n};\n"]}