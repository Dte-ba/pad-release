{"version":3,"sources":["components/epm-manager/index.js"],"names":["fs","require","path","Epm","Q","manager","config","createDef","defer","loading","_repos","load","repository","undefined","Error","repopath","process","env","REPOSITORY_PATH","existsSync","join","create","name","engine","err","console","log","e","reject","resolve","promise","get","deferred","done","finder","find","repos","list","filter","r","length","info","repo","progress","notify","fail","module","exports"],"mappings":"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","file":"components/epm-manager/index.js","sourcesContent":["'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar Epm = require('epm');\nvar Q = require('q');\n\nvar manager = {};\n\nvar config = require('../../config/environment');\n\nvar createDef = Q.defer();\nvar loading = false;\n\n// keep repository instances\nvar _repos = {};\n\nmanager.load = function(){\n\n  if (config.repository === undefined){\n    throw new Error('Repository path is not defined');\n  }\n\n  loading = true;\n\n  var repopath = config.repository || process.env.REPOSITORY_PATH;\n\n  if (!fs.existsSync(path.join(repopath, '.epm'))){\n    Epm.create({path: repopath, name: 'local', engine: 'epm-pad-engine' }, function(err){\n      if (err) {\n        console.log(err);\n        var e = new Error('Error creating the repository');\n        createDef.reject(e)\n        throw e;\n      }\n      createDef.resolve(repopath);\n    });\n  } else {\n    createDef.resolve(repopath);\n  }\n\n  return createDef.promise;\n};\n\nmanager.get = function(name){\n  var deferred = Q.defer();\n\n  if (loading===false) {\n    manager.load();\n  }\n\n  var repopath = config.repository;\n\n  // first wait to create\n  createDef\n    .promise\n    .done(function(){\n\n      if (_repos[name] !== undefined){\n        return deferred.resolve(_repos[name]);\n      }\n\n      Epm.finder.find(repopath, function(err, repos){\n        var list = repos.filter(function(r){\n          return r.name === name;\n        });\n        \n        if (list.length === 0) {\n          return deferred.reject(new Error('Unknown repository ' + name));\n        }\n\n        if (list.length > 1) {\n          return deferred.reject(new Error('Multiple matches for ' + name + ' in the repository list'));\n        }\n\n        var info = list[0];\n        var repo = new Epm(info.path);\n        \n        repo\n          .load(true)\n          .progress(deferred.notify)\n          .fail(deferred.reject)\n          .done(function(){\n            _repos[name] = repo;\n            deferred.resolve(_repos[name])            \n          });\n        \n      });\n\n    });\n\n  return deferred.promise;\n};\n\nmodule.exports = manager;\n"],"sourceRoot":"/source/"}