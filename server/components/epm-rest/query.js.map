{"version":3,"sources":["components/epm-rest/query.js"],"names":["_","require","manager","transformQuery","part","isArray","a","forEach","p","push","q","forIn","value","key","isObject","RegExp","module","exports","query","req","res","next","rname","params","repository","get","progress","info","fail","err","done","repo","body","find","items","json","queryp","qobj","take","skip","total","length","undefined","taked","slice"],"mappings":"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","file":"query.js","sourcesContent":["'use strict';\n\nvar _ = require('lodash');\n\nvar manager = require('../epm-manager');\n\nvar transformQuery = function(part){\n\n  if (_.isArray(part)){\n    var a = [];\n    part.forEach(function(p){\n      a.push(transformQuery(p))\n    });\n    return a;\n  }\n\n  var q = {};\n\n  _.forIn(part, function(value, key) {\n    if (key === '$in') {\n      q[key] = value;\n    } else if (_.isObject(value) || _.isArray(value)) {\n      q[key] = transformQuery(value);\n    } else if (key === '$regex') {\n      q[key] = new RegExp(value, 'ig');\n    } else {\n      q[key] = value;\n    }\n\n  });\n\n  return q;\n};\n\nmodule.exports =  {\n\nquery: function(req, res, next){\n  var rname = req.params.repository;\n\n  manager\n    .get(rname)\n    .progress(function(info){\n\n    })\n    .fail(function(err){\n      next(err);\n    })\n    .done(function(repo){\n      var q = transformQuery(req.body);\n\n      repo\n      .find(q, function(err, items){\n        if (err) {\n          return next(err);\n        }\n        res.json(items);\n      });\n    });\n  },\n  queryp: function(req, res, next){\n    var rname = req.params.repository;\n\n    manager\n      .get(rname)\n      .progress(function(info){\n\n      })\n      .fail(function(err){\n        next(err);\n      })\n      .done(function(repo){\n        var qobj = req.body;\n\n        var q = transformQuery(qobj.query);\n        var take = qobj.take;\n        var skip = qobj.skip;\n\n        repo\n        .find(q, function(err, items){\n          if (err) {\n            return next(err);\n          }\n          var total = items.length;\n          if (take !== undefined && skip !== undefined) {\n            var taked = _(items).slice(skip, skip+take).value();\n            \n            //console.log('items.length ', taked.length);\n            //console.log('skip ', skip);\n            //console.log('take ', take);\n\n            res.json({items: taked, total: total, skip: skip});\n          } else {\n            res.json({items: items, total: total, take: take });  \n          }\n          \n        });\n        \n      });\n    }\n\n};"]}